{
	"info": {
		"_postman_id": "taskmanager-api-local",
		"name": "Task Manager API - Local Testing",
		"description": "Colección completa para probar la API de Task Manager en desarrollo local",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "taskmanager"
	},
	"item": [
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "Root Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks Management",
			"item": [
				{
					"name": "Create Task - Basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar que la respuesta sea exitosa",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Guardar el ID de la tarea creada para usar en otras pruebas",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.task && jsonData.task.id) {",
									"        pm.collectionVariables.set(\"task_id\", jsonData.task.id);",
									"        console.log(\"Task ID guardado: \" + jsonData.task.id);",
									"    }",
									"}",
									"",
									"// Verificar estructura de respuesta",
									"pm.test(\"Response has task object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('task');",
									"    pm.expect(jsonData.task).to.have.property('id');",
									"    pm.expect(jsonData.task).to.have.property('title');",
									"    pm.expect(jsonData.task).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tarea desde Postman\",\n    \"description\": \"Esta es una tarea de prueba creada desde Postman\",\n    \"status\": \"pending\",\n    \"priority\": \"medium\",\n    \"tags\": [\"postman\", \"testing\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task - With Due Date",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tarea con fecha límite\",\n    \"description\": \"Tarea que debe completarse en una fecha específica\",\n    \"status\": \"pending\",\n    \"priority\": \"high\",\n    \"due_date\": \"2025-12-31T23:59:59\",\n    \"tags\": [\"urgent\", \"deadline\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tasks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tasks');",
									"    pm.expect(jsonData.tasks).to.be.an('array');",
									"});",
									"",
									"// Mostrar cuántas tareas se encontraron",
									"var jsonData = pm.response.json();",
									"console.log(\"Total tareas encontradas: \" + jsonData.tasks.length);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Tasks - Filter by Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?status=pending&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Tasks - Filter by Priority",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?priority=high&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "priority",
									"value": "high"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has task object\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('task');",
									"        pm.expect(jsonData.task).to.have.property('id');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Task was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('task');",
									"    pm.expect(jsonData.task.status).to.eql('in_progress');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tarea actualizada desde Postman\",\n    \"description\": \"Descripción actualizada con más detalles\",\n    \"status\": \"in_progress\",\n    \"priority\": \"high\",\n    \"tags\": [\"postman\", \"testing\", \"updated\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Task was deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File Management",
			"item": [
				{
					"name": "Upload File to Task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Crear una tarea primero para subir archivo",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('base_url') + '/tasks',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            title: 'Tarea para subir archivo',",
									"            description: 'Tarea específica para probar subida de archivos',",
									"            status: 'pending',",
									"            priority: 'medium'",
									"        })",
									"    }",
									"}, function (err, response) {",
									"    if (response.code === 200) {",
									"        var jsonData = response.json();",
									"        pm.collectionVariables.set('file_task_id', jsonData.task.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{file_task_id}}/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{file_task_id}}",
								"upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Statistics & Analytics",
			"item": [
				{
					"name": "Get Task Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has stats object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('stats');",
									"    pm.expect(jsonData.stats).to.have.property('total_tasks');",
									"    pm.expect(jsonData.stats).to.have.property('by_status');",
									"    pm.expect(jsonData.stats).to.have.property('by_priority');",
									"});",
									"",
									"// Mostrar estadísticas en consola",
									"var jsonData = pm.response.json();",
									"console.log('=== ESTADÍSTICAS DE TAREAS ===');",
									"console.log('Total: ' + jsonData.stats.total_tasks);",
									"console.log('Por estado: ' + JSON.stringify(jsonData.stats.by_status));",
									"console.log('Por prioridad: ' + JSON.stringify(jsonData.stats.by_priority));",
									"console.log('Con archivos: ' + jsonData.stats.with_files);",
									"console.log('Vencidas: ' + jsonData.stats.overdue);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/stats/summary",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"stats",
								"summary"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "Get Non-existent Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/nonexistent-task-id-12345",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"nonexistent-task-id-12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 (Validation Error)\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Tarea sin título (debería fallar)\",\n    \"status\": \"invalid_status\",\n    \"priority\": \"invalid_priority\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta antes de cada request",
					"console.log('Ejecutando request a: ' + request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta después de cada request",
					"console.log('Response time: ' + pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "file_task_id",
			"value": "",
			"type": "string"
		}
	]
}